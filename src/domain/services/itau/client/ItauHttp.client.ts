import axios, { AxiosInstance } from 'axios'
import https from 'https'
import fs from 'fs'
import path from 'path'
import { ItauApiPayload } from '../types/itauApiTypes'

export class ItauHttpClient {
  private readonly axiosInstance: AxiosInstance
  private readonly baseUrl: string

  constructor() {
    this.baseUrl = process.env.ITAU_API_URL!
    this.axiosInstance = this.createAxiosInstanceWithCerts()

    console.log('üåê ItauHttpClient inicializado (Bearer Token Auth)')
    console.log(`   Base URL: ${this.baseUrl}`)

    if (!this.baseUrl) {
      console.error('‚ùå ITAU_API_URL n√£o configurado!')
      throw new Error('ITAU_API_URL √© obrigat√≥rio')
    }
  }

  private createAxiosInstanceWithCerts(): AxiosInstance {
    try {
      // Caminhos dos certificados
      const certsPath = path.join(process.cwd(), 'certs', 'itau')
      const keyPath = path.join(certsPath, 'NOVO_CERTIFICADO.key')
      const certPath = path.join(certsPath, 'Certificado_itau.crt')

      // Verificar se os arquivos existem
      const keyExists = fs.existsSync(keyPath)
      const certExists = fs.existsSync(certPath)

      console.log('üîí Configurando certificados para HTTP client:')
      console.log(`   Key: ${keyExists ? '‚úÖ' : '‚ùå'} (${keyPath})`)
      console.log(`   Cert: ${certExists ? '‚úÖ' : '‚ùå'} (${certPath})`)

      // Configura√ß√£o base do axios
      const config: any = {
        baseURL: this.baseUrl,
        timeout: 30000,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Itau-API-Client/1.0'
        }
      }

      // Se temos certificados, configurar HTTPS agent
      if (keyExists && certExists) {
        const key = fs.readFileSync(keyPath, 'utf8')
        const cert = fs.readFileSync(certPath, 'utf8')

        const httpsAgent = new https.Agent({
          key: key,
          cert: cert,
          rejectUnauthorized: true
        })

        config.httpsAgent = httpsAgent
        console.log('‚úÖ HTTP client configurado com certificados')
      } else {
        console.warn('‚ö†Ô∏è HTTP client sem certificados')
      }

      return axios.create(config)
    } catch (error) {
      console.error('‚ùå Erro ao configurar HTTP client:', error)

      // Fallback sem certificados
      return axios.create({
        baseURL: this.baseUrl,
        timeout: 30000,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Itau-API-Client/1.0'
        }
      })
    }
  }

  async simulateCredit(
    payload: ItauApiPayload,
    accessToken: string
  ): Promise<any> {
    const flowId = this.generateFlowId()
    const correlationId = this.generateCorrelationId()

    console.log('üì§ Enviando simula√ß√£o com Bearer Token...')

    // Headers com Bearer Token authentication
    const headers = {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${accessToken}`,
      'x-itau-correlationID': correlationId,
      'x-itau-flowID': flowId
    }

    console.log('üìã Headers da requisi√ß√£o:')
    console.log(
      JSON.stringify(
        {
          ...headers,
          Authorization: `Bearer ${accessToken.substring(0, 20)}...` // Mascarar token nos logs
        },
        null,
        2
      )
    )

    console.log('üì¶ Payload da simula√ß√£o:')
    console.log(JSON.stringify(payload, null, 2))

    try {
      const response = await this.axiosInstance.post('/simulations', payload, {
        headers
      })

      console.log('‚úÖ SUCESSO! Simula√ß√£o processada pelo Ita√∫')
      console.log(`   Status: ${response.status}`)
      console.log(`   Headers de resposta:`)
      console.log(JSON.stringify(response.headers, null, 2))
      console.log(`   Dados da resposta:`)
      console.log(JSON.stringify(response.data, null, 2))

      return response.data
    } catch (error) {
      console.error('‚ùå Erro na simula√ß√£o do Ita√∫:')

      if (axios.isAxiosError(error)) {
        const status = error.response?.status
        const data = error.response?.data
        const responseHeaders = error.response?.headers

        console.error(`   Status: ${status}`)
        console.error(`   Response Headers:`)
        console.error(JSON.stringify(responseHeaders, null, 2))
        console.error(`   Response Data:`)
        console.error(JSON.stringify(data, null, 2))

        // An√°lise espec√≠fica por status de erro
        if (status === 401) {
          console.error('\nüí° ERRO 401 - Token inv√°lido:')
          console.error('   - Bearer token pode estar expirado')
          console.error('   - Bearer token pode estar inv√°lido')
          console.error(
            '   - Bearer token pode n√£o ter as permiss√µes necess√°rias'
          )
          console.error('   - Tente renovar o token de autentica√ß√£o')

          throw new Error(
            'Bearer token inv√°lido ou expirado - renova√ß√£o necess√°ria'
          )
        } else if (status === 400) {
          console.error('\nüí° ERRO 400 - Dados da simula√ß√£o inv√°lidos:')
          console.error(
            '   - Verifique se todos os campos obrigat√≥rios est√£o presentes'
          )
          console.error('   - Verifique se os tipos de dados est√£o corretos')
          console.error(
            '   - Verifique se os valores est√£o dentro dos limites permitidos'
          )

          throw new Error(
            `Dados inv√°lidos na simula√ß√£o: ${data?.message || data?.error_description || 'Verifique os dados enviados'}`
          )
        } else if (status === 403) {
          console.error('\nüí° ERRO 403 - Acesso negado:')
          console.error('   - Token n√£o tem permiss√£o para simular cr√©dito')
          console.error(
            '   - Cliente pode n√£o estar autorizado para este produto'
          )

          throw new Error('Token n√£o tem permiss√£o para simula√ß√£o de cr√©dito')
        } else if (status === 422) {
          console.error('\nüí° ERRO 422 - Dados n√£o process√°veis:')
          console.error(
            '   - Dados est√£o corretos mas n√£o podem ser processados'
          )
          console.error('   - Pode haver restri√ß√µes de neg√≥cio espec√≠ficas')

          throw new Error(
            `Dados n√£o process√°veis: ${data?.message || data?.error_description || 'Verifique as regras de neg√≥cio'}`
          )
        } else if (status === 429) {
          console.error('\nüí° ERRO 429 - Rate limit excedido:')
          console.error('   - Muitas requisi√ß√µes em pouco tempo')
          console.error('   - Aguarde antes de tentar novamente')

          throw new Error(
            'Rate limit excedido - aguarde antes de tentar novamente'
          )
        } else if (status === 500) {
          console.error('\nüí° ERRO 500 - Erro interno do Ita√∫:')
          console.error('   - Problema no servidor do Ita√∫')
          console.error('   - Tente novamente em alguns minutos')

          throw new Error(
            'Erro interno do servidor do Ita√∫ - tente novamente mais tarde'
          )
        } else if (status === 503) {
          console.error('\nüí° ERRO 503 - Servi√ßo indispon√≠vel:')
          console.error('   - API do Ita√∫ temporariamente indispon√≠vel')
          console.error('   - Manuten√ß√£o programada ou sobrecarga')

          throw new Error('Servi√ßo do Ita√∫ temporariamente indispon√≠vel')
        }

        // Erro gen√©rico
        throw new Error(
          `Erro na API do Ita√∫ (${status}): ${data?.message || data?.error_description || 'Erro desconhecido'}`
        )
      }

      // Erro de rede
      console.error(
        '   Erro de rede:',
        error instanceof Error ? error.message : String(error)
      )
      throw new Error(
        `Erro de rede na comunica√ß√£o com o Ita√∫: ${error instanceof Error ? error.message : String(error)}`
      )
    }
  }

  // M√©todo para fazer requisi√ß√µes autenticadas gen√©ricas
  async makeAuthenticatedRequest(
    endpoint: string,
    payload: any,
    accessToken: string,
    method: 'GET' | 'POST' | 'PUT' | 'DELETE' = 'POST'
  ): Promise<any> {
    const flowId = this.generateFlowId()
    const correlationId = this.generateCorrelationId()

    const headers = {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${accessToken}`,
      'x-itau-correlationID': correlationId,
      'x-itau-flowID': flowId
    }

    console.log(`üì§ Fazendo requisi√ß√£o ${method} para ${endpoint}`)

    try {
      let response
      switch (method) {
        case 'GET':
          response = await this.axiosInstance.get(endpoint, { headers })
          break
        case 'POST':
          response = await this.axiosInstance.post(endpoint, payload, {
            headers
          })
          break
        case 'PUT':
          response = await this.axiosInstance.put(endpoint, payload, {
            headers
          })
          break
        case 'DELETE':
          response = await this.axiosInstance.delete(endpoint, { headers })
          break
      }

      console.log(`‚úÖ ${method} ${endpoint} - Status: ${response.status}`)
      return response.data
    } catch (error) {
      console.error(`‚ùå Erro em ${method} ${endpoint}:`, error)
      throw error
    }
  }

  private generateFlowId(): string {
    return `flow-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`
  }

  private generateCorrelationId(): string {
    return `corr-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`
  }

  // M√©todo para debug completo
  public debugHttpClient(): void {
    console.log('\nüîç DEBUG HTTP CLIENT:')
    console.log('=====================')
    console.log(`üìç Base URL: ${this.baseUrl}`)
    console.log(
      `üìú Certificados: ${this.hasCertificates() ? 'Configurados' : 'N√£o configurados'}`
    )
    console.log(`‚è±Ô∏è  Timeout: ${this.axiosInstance.defaults.timeout}ms`)
    console.log(`üìã Headers padr√£o:`)
    console.log(JSON.stringify(this.axiosInstance.defaults.headers, null, 2))
  }

  // M√©todo para verificar se certificados est√£o configurados
  public hasCertificates(): boolean {
    const certsPath = path.join(process.cwd(), 'certs', 'itau')
    const keyPath = path.join(certsPath, 'NOVO_CERTIFICADO.key')
    const certPath = path.join(certsPath, 'Certificado_itau.crt')

    return fs.existsSync(keyPath) && fs.existsSync(certPath)
  }

  // M√©todo para verificar sa√∫de da conex√£o (sem autentica√ß√£o)
  public async healthCheck(): Promise<boolean> {
    try {
      // Tentar fazer uma requisi√ß√£o simples para verificar conectividade
      const response = await this.axiosInstance.get('/health', {
        timeout: 5000,
        validateStatus: () => true // Aceitar qualquer status para verificar conectividade
      })

      console.log(`üè• Health check - Status: ${response.status}`)
      return response.status < 500 // Considera saud√°vel se n√£o for erro de servidor
    } catch (error) {
      console.error(
        '‚ùå Health check falhou:',
        error instanceof Error ? error.message : String(error)
      )
      return false
    }
  }
}
