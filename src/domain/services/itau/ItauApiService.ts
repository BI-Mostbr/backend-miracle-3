import { IBankApiService } from '@infra/interfaces'
import { ItauAuthService } from './auth/itauAuthService'
import { ItauHttpClient } from './client/ItauHttp.client'
import { BankResponseSimulation, CreditSimulation } from '@domain/entities'
import { ItauPayloadMapper } from './mappers/ItauPayload.mapper'
import { ItauResponseMapper } from './mappers/itauResponse.mapper'

export class ItauApiService implements IBankApiService {
  private readonly authService: ItauAuthService
  private readonly httpClient: ItauHttpClient

  constructor() {
    this.authService = new ItauAuthService()
    this.httpClient = new ItauHttpClient()

    console.log('üè¶ ItauApiService inicializado com SigV4 Bearer Token')
    this.validateConfiguration()
  }

  private validateConfiguration(): void {
    // Verificar se todas as configura√ß√µes necess√°rias est√£o presentes
    if (!this.authService.hasCredentials()) {
      throw new Error('Credenciais do Ita√∫ n√£o configuradas corretamente')
    }

    console.log('‚úÖ Configura√ß√£o do Ita√∫ validada')
  }

  getBankName(): string {
    return 'itau'
  }

  async simulationCredit(
    simulation: CreditSimulation
  ): Promise<BankResponseSimulation> {
    console.log('üöÄ Iniciando simula√ß√£o de cr√©dito no Ita√∫...')

    try {
      // Passo 1: Obter access token via SigV4
      console.log('üìù Etapa 1: Obtendo access token...')
      const accessToken = await this.authService.getAccessToken()
      console.log('‚úÖ Access token obtido com sucesso')

      // Passo 2: Converter dados para formato esperado pelo Ita√∫
      console.log('üìù Etapa 2: Convertendo dados da simula√ß√£o...')
      const itauPayload = ItauPayloadMapper.convertToPayload(simulation)
      console.log('‚úÖ Payload do Ita√∫ preparado')

      // Passo 3: Fazer requisi√ß√£o de simula√ß√£o com Bearer Token
      console.log('üìù Etapa 3: Enviando requisi√ß√£o de simula√ß√£o...')
      const itauResponse = await this.httpClient.simulateCredit(
        itauPayload,
        accessToken
      )
      console.log('‚úÖ Resposta da simula√ß√£o recebida')

      // Passo 4: Converter resposta para formato interno
      console.log('üìù Etapa 4: Convertendo resposta...')
      const internApiResponse =
        ItauResponseMapper.convertToInternApiResponse(itauResponse)
      console.log('‚úÖ Simula√ß√£o do Ita√∫ processada com sucesso')

      return internApiResponse
    } catch (error) {
      console.error(`‚ùå Erro na simula√ß√£o do ${this.getBankName()}:`, error)

      // Tratamento espec√≠fico de erros
      if (error instanceof Error) {
        if (error.message.includes('Bearer token inv√°lido')) {
          console.log('üîÑ Tentando renovar token e repetir a opera√ß√£o...')
          try {
            // For√ßar renova√ß√£o do token e tentar novamente
            await this.authService.refreshToken()
            const newAccessToken = await this.authService.getAccessToken()
            const itauPayload = ItauPayloadMapper.convertToPayload(simulation)
            const retryResponse = await this.httpClient.simulateCredit(
              itauPayload,
              newAccessToken
            )
            const retryInternResponse =
              ItauResponseMapper.convertToInternApiResponse(retryResponse)

            console.log(
              '‚úÖ Simula√ß√£o realizada com sucesso ap√≥s renova√ß√£o do token'
            )
            return retryInternResponse
          } catch (retryError) {
            console.error('‚ùå Erro mesmo ap√≥s renova√ß√£o do token:', retryError)
            throw new Error(
              `Falha na simula√ß√£o do Ita√∫ mesmo ap√≥s renova√ß√£o do token: ${retryError instanceof Error ? retryError.message : String(retryError)}`
            )
          }
        }

        // Outros tipos de erro
        throw new Error(
          `${this.getBankName()} simulation failed: ${error.message}`
        )
      }

      throw new Error(
        `${this.getBankName()} simulation failed: ${String(error)}`
      )
    }
  }

  // M√©todo para verificar se o servi√ßo est√° funcionando
  async healthCheck(): Promise<boolean> {
    try {
      console.log('üè• Verificando sa√∫de do servi√ßo Ita√∫...')

      // Verificar autentica√ß√£o
      const hasCredentials = this.authService.hasCredentials()
      if (!hasCredentials) {
        console.error('‚ùå Credenciais n√£o configuradas')
        return false
      }

      // Verificar conectividade
      const isConnected = await this.httpClient.healthCheck()
      if (!isConnected) {
        console.error('‚ùå Problema de conectividade')
        return false
      }

      // Verificar se consegue obter token
      try {
        await this.authService.getAccessToken()
        console.log('‚úÖ Servi√ßo Ita√∫ est√° saud√°vel')
        return true
      } catch (authError) {
        console.error('‚ùå Problema na autentica√ß√£o:', authError)
        return false
      }
    } catch (error) {
      console.error('‚ùå Erro no health check:', error)
      return false
    }
  }

  // M√©todo para debug completo do servi√ßo
  async debugService(): Promise<void> {
    console.log('\nüîç DEBUG COMPLETO DO SERVI√áO ITA√ö:')
    console.log('===================================')

    // Debug da autentica√ß√£o
    this.authService.debugAuth()

    // Debug do HTTP client
    this.httpClient.debugHttpClient()

    // Verificar sa√∫de
    const isHealthy = await this.healthCheck()
    console.log(
      `üè• Status do servi√ßo: ${isHealthy ? '‚úÖ Saud√°vel' : '‚ùå Com problemas'}`
    )

    // Informa√ß√µes do token
    const tokenInfo = this.authService.getTokenInfo()
    console.log(`üé´ Informa√ß√µes do token:`, tokenInfo)
  }

  // M√©todo para for√ßar renova√ß√£o de credenciais
  async refreshCredentials(): Promise<void> {
    console.log('üîÑ For√ßando renova√ß√£o das credenciais...')
    await this.authService.refreshToken()
    console.log('‚úÖ Credenciais renovadas')
  }
}
