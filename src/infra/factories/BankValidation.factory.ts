import { InterValidationStrategy } from '@domain/validation/strategies/inter/InterValidationStrategy'
import { ItauValidationStrategy } from '@domain/validation/strategies/itau/ItauValidationStrategy'
import { IBankValidationStrategy } from '@infra/interfaces/IBankValidationStrategy.interface'

export class BankValidationFactory {
  private static strategies: Map<string, IBankValidationStrategy> = new Map()

  /**
   * Registra uma estrat√©gia de valida√ß√£o
   */
  static registerStrategy(
    bankName: string,
    strategy: IBankValidationStrategy
  ): void {
    this.strategies.set(bankName.toLowerCase(), strategy)
    console.log(`üìã Estrat√©gia registrada para ${bankName}`)
  }

  /**
   * Obt√©m estrat√©gia de valida√ß√£o para um banco
   */
  static getStrategy(bankName: string): IBankValidationStrategy {
    const strategy = this.strategies.get(bankName.toLowerCase())

    if (!strategy) {
      throw new Error(
        `Estrat√©gia de valida√ß√£o n√£o encontrada para o banco: ${bankName}`
      )
    }

    return strategy
  }

  /**
   * Verifica se existe estrat√©gia para um banco
   */
  static hasStrategy(bankName: string): boolean {
    return this.strategies.has(bankName.toLowerCase())
  }

  /**
   * Lista todos os bancos com estrat√©gias registradas
   */
  static getAvailableBanks(): string[] {
    return Array.from(this.strategies.keys())
  }

  /**
   * Obt√©m informa√ß√µes de todos os bancos
   */
  static getAllBankLimits(): { [bankName: string]: any } {
    const allLimits: { [bankName: string]: any } = {}

    this.strategies.forEach((strategy, bankName) => {
      allLimits[bankName] = {
        bankName: strategy.bankName,
        limits: strategy.limits,
        ltvMaximo: `${strategy.limits.ltv.max}%`,
        ltvMinimo: `${strategy.limits.ltv.min}%`,
        prazoMinimo: `${strategy.limits.term.min} meses`,
        prazoMaximo: `${strategy.limits.term.max} meses`,
        valorMinimoImovel: `R$ ${strategy.limits.propertyValue.min.toLocaleString()}`,
        valorMaximoImovel: strategy.limits.propertyValue.max
          ? `R$ ${strategy.limits.propertyValue.max.toLocaleString()}`
          : 'Sem limite',
        rendaMinima: strategy.limits.income?.min
          ? `R$ ${strategy.limits.income.min.toLocaleString()}`
          : 'N√£o especificada'
      }
    })

    return allLimits
  }

  /**
   * Remove estrat√©gia de um banco
   */
  static removeStrategy(bankName: string): boolean {
    const removed = this.strategies.delete(bankName.toLowerCase())
    if (removed) {
      console.log(`üóëÔ∏è Estrat√©gia removida para ${bankName}`)
    }
    return removed
  }

  /**
   * Limpa todas as estrat√©gias
   */
  static clearAll(): void {
    this.strategies.clear()
    console.log('üóëÔ∏è Todas as estrat√©gias foram removidas')
  }

  /**
   * Inicializa as estrat√©gias padr√£o
   */
  static initializeDefaultStrategies(): void {
    console.log('üöÄ Inicializando estrat√©gias padr√£o...')

    // Registrar estrat√©gias dos bancos
    this.registerStrategy('inter', new InterValidationStrategy())
    this.registerStrategy('itau', new ItauValidationStrategy())

    // Adicionar Santander quando implementado
    // this.registerStrategy('santander', new SantanderValidationStrategy())

    console.log(
      `‚úÖ ${this.strategies.size} estrat√©gia(s) inicializadas: ${this.getAvailableBanks().join(', ')}`
    )
  }

  /**
   * Cria inst√¢ncia singleton de uma estrat√©gia
   */
  static getSingletonStrategy(bankName: string): IBankValidationStrategy {
    if (!this.hasStrategy(bankName)) {
      // Auto-registrar estrat√©gias conhecidas
      switch (bankName.toLowerCase()) {
        case 'inter':
          this.registerStrategy('inter', new InterValidationStrategy())
          break
        case 'itau':
          this.registerStrategy('itau', new ItauValidationStrategy())
          break
        default:
          throw new Error(`Estrat√©gia n√£o implementada para ${bankName}`)
      }
    }

    return this.getStrategy(bankName)
  }

  /**
   * Valida se um banco espec√≠fico est√° dispon√≠vel
   */
  static validateBankAvailability(bankName: string): {
    available: boolean
    message: string
  } {
    const isAvailable = this.hasStrategy(bankName)

    return {
      available: isAvailable,
      message: isAvailable
        ? `${bankName} est√° dispon√≠vel para valida√ß√£o`
        : `${bankName} n√£o possui estrat√©gia de valida√ß√£o implementada. Bancos dispon√≠veis: ${this.getAvailableBanks().join(', ')}`
    }
  }

  /**
   * Obt√©m estat√≠sticas das estrat√©gias
   */
  static getStatistics(): {
    totalStrategies: number
    availableBanks: string[]
    averageLTV: number
    averageMinTerm: number
    averageMaxTerm: number
  } {
    const strategies = Array.from(this.strategies.values())

    const totalStrategies = strategies.length
    const availableBanks = this.getAvailableBanks()

    const averageLTV =
      strategies.reduce((sum, s) => sum + s.limits.ltv.max, 0) / totalStrategies
    const averageMinTerm =
      strategies.reduce((sum, s) => sum + s.limits.term.min, 0) /
      totalStrategies
    const averageMaxTerm =
      strategies.reduce((sum, s) => sum + s.limits.term.max, 0) /
      totalStrategies

    return {
      totalStrategies,
      availableBanks,
      averageLTV: Math.round(averageLTV),
      averageMinTerm: Math.round(averageMinTerm),
      averageMaxTerm: Math.round(averageMaxTerm)
    }
  }
}

// Auto-inicializar estrat√©gias padr√£o
BankValidationFactory.initializeDefaultStrategies()
